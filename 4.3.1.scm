(define (require p) (if (not p) (amb)))

(define (an-element-of items)
  (require (not (null? items)))
  (amb (car items) (an-element-of (cdr items))))

(define (an-integer-starting-from n)
  (amb n (an-integer-starting-from (+ n 1))))


;; 4.35
(define (a-pythagorean-triple-between low high)
  (let ((i (an-integer-between low high)))
    (let ((j (an-integer-between i high)))
      (let ((k (an-integer-between j high)))
        (require (= (+ (* i i) (* j j)) (* k k)))
        (list i j k)))))

(define (an-integer-between low high)
  (let ((a (an-integer-starting-from low)))
    (require (<= a high))
    (amb a (an-integer-starting-from (+ low 1)))))


(define (an-integer-between low high)
  (require (<= low high))
  (amb low (an-integer-between (+ low 1) high)))

(define (a-pythagorean-triple-between low high)
  (let ((i (an-integer-between low high)))
    (let ((j (an-integer-between i high)))
      (let ((k (an-integer-between j high)))
        (require (= (+ (* i i) (* j j)) (* k k)))
        (list i j k)))))

;; an-integer-stating-fromを使った場合
(define (a-pythagorean-triple-from low)
  (let ((i (an-integer-starting-from low)))
    (let ((j (an-integer-starting-from i)))
      (let ((k (an-integer-betw)))))))

(define (a-pythagorean-triple-between low high)
  (let ((i (an-integer-between low high))
        (hsq (* high high)))
    (let ((j (an-integer-between i high)))
      (let ((ksq (+ (* i i) (* j j))))
        (require (>= hsq ksq))
        (let ((k (sqrt ksq)))
          (require (integer? k))
          (list i j k))))))

(define (distinct? items)
  (cond ((nuLL? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct (cdr items)))))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (sith (amb 1 2 3 4 5)))
    (require (distinct (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (< cooper miller))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)))))
    (list (list 'baker baker)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (smith (amb 1 2 3 4 5)))
    (require (distinct (list baker cooper fletcher miller smith)))
    (require (< cooper miller))
    (require (not (= (abs (- fletcher cooper)))))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= fletcher 1)))
    (require (not (= fletcher 5)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (list (list 'baker baker)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5)))
    (require (not (= baker 5)))
    (let ((cooper (amb 1 2 3 4 5)))
      (require (not (= cooper 1)))
      (distinct? (list baker cooper))
      (let ((fletcher (amb 1 2 3 4 5)))
        (require (not (= fletcher 1)))
        (require (not (= fletcher 5)))
        (require (not (= (abs (- fletcher cooper)) 1)))
        (require (distinct? (list baker cooper fletcher)))
        (let ((miller (amb 1 2 3 4 5)))
          (require (< cooper miller))
          (require (distinct? (list baker cooper fletcher miller)))
          (let ((smith (amb 1 2 3 4 5)))
            (require (not (= (abs (- smith fletcher)) 1)))
            (require (distinct? (list baker cooper fletcher miller smith)))
            (list (list 'baker baker)
                  (list 'cooper cooper)
                  (list 'fletcher fletcher)
                  (list 'miller miller)
                  (lsit 'smith smith))))))))

;; 4.41
(use util.combinations)
(use srfi-1)
(define (multiple-dwelling)
  (filter (lambda (x)
            (let ((baker (first x))
                  (cooper (second x))
                  (fletcher (third x))
                  (miller (fourth x))
                  (smith (fifth x)))
              (and
               (not (= baker 5))
               (not (= cooper 1))
               (not (= fletcher 5))
               (not (= fletcher 1))
               (< cooper miller)
               (not (= (abs (- smith fletcher)) 1))
               (not (= (abs (- fletcher cooper)) 1)))))
          (permutations '(1 2 3 4 5))))


;; 4.42
(define (xor x y)
  (or (and x (not y))
      (and (not x) y)))

(define (phillips1934)
  (filter (lambda (x)
            (let ((betty (first x))
                  (ethel (second x))
                  (joan (third x))
                  (kitty (fourth x))
                  (mary (fifth x)))
              (and
               (xor (= kitty 2)
                    (= betty 3))
               (xor (= ethel 1)
                    (= joan 2))
               (xor (= joan 3)
                    (= ethel 5))
               (xor (= kitty 2)
                    (= mary 4))
               (xor (= mary 4)
                    (= betty 1)))))
          (permutations '(1 2 3 4 5))))


(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (sith (amb 1 2 3 4 5)))
    (require (distinct (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (< cooper miller))
    (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)))))
    (list (list 'baker baker)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))

(define (kansas-state-enginner)
  (let ((moore (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                     (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
        (downing (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                       (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
        (hall (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                    (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
        (barnacle-hood (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                    (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
        (parker (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                      (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
        (daughter car)
        (yacht cdr))
    (let ((father-list moore hall downing barnacle-hood parker))
      (require (distinct? father-list))
      (require (fold-left (lambda (x y) (and (not (eq? (daughter x) (yacht x))) y))
                     #t father-list))
      (require (eq? (daughter moore) 'mary))
      (require (eq? (yocht barnacle-hood) 'gabrielle))
      (require (eq? (yocht moore) 'Lorna))
      (require (eq? (yocht hall) 'rosalind))
      (require (eq? (yocht downing) 'melissa))
      (require (eq? (daughter barnacle-hood) 'melissa))
      (require (eq? (daughter parker)
                    (yocht (car (filter (lambda (x) (eq? (daughter x) 'gabrielle))
                                        father-list)))))
      (list 'moore moore 'downing downing 'hall hall 'barnacle-hood barnacle-hood 'parker parker))))


(define (kansas-state-enginner)
  (let ((moore (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                     (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)))
        (daughter car)
        (yacht cdr))
    (require (eq? (daughter moore) 'mary))
    (require (eq? (yocht moore) 'Lorna))
    (let ((downing (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                         (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa))))
      (require (distinct? (list moore downing)))
      (require (eq? (yocht downing) 'melissa))
      (require (not (eq? (daughter downing) (yocht downing))))
      (let ((hall (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                        (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa))))
        (require (distinct? (list moore downing hall)))
        (require (not (eq? (daughter hall) (yocht hall))))
        (require (eq? (yocht hall) 'rosalind))
        (let ((barnacle-hood (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                                   (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa))))
          (require (distinct? moore downing hall barnacle-hood))
          (require (not (eq? (daughter barnacle-hood) (yocht barnacle-hood))))
          (require (eq? (daughter barnacle-hood) 'melissa))
          (require (eq? (yocht barnacle-hood) 'gabrielle))
          (let ((parker (cons (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa)
                              (amb 'mary 'gabrielle 'lorna 'rosalind 'melissa))))
            (require (distinct? (list moore downing hall barnacle-hood parker)))
            (require (not (eq? (daughter parker) (yocht parker))))
            (require (eq? (daughter parker)
                    (yocht (car (filter (lambda (x) (eq? (daughter x) 'gabrielle))
                                        father-list)))))
            (list 'moore moore 'downing downing 'hall hall 'barnacle-hood barnacle-hood 'parker parker)))))))

;; 4.44
(define (eight-queen)
  (define (cross? a b)
    (= (/ (/ (car a) (car b))
          (abs (- (cdr a) (cdr b))))
       1))
  (let ((chess (iota 8 1)))
    (let ((one (cons 1 (amb chess))))
      (let ((two (cons 2 (amb chess))))
        (require (distinct (list one two)))
        (require (not (cross? two one)))
        (let ((three (cons 3 (amb chess))))
          (require (distince (list one two three)))
          (require (fold (lambda (x y) (and (not (cross? three x)) y)) #t (list one two)))
          (let ((four (cons 4 (amb chess))))
            (require (distinct? (list one two three four)))
            (require (fold (lambda (x y) (and (not (cross? four x)) y)) #t (list one two three)))
            (let ((five (cons 5 (amb chess))))
              (require (distinct? (list one two three four five)))
              (require (fold (lambda (x y) (and (not (cross? five x)) y)) #t (list one two three four)))
              (let ((six (cons 6 (amb chess))))
                (require (distinct? (list one two three four five six)))
                (require (fold (lambda (x y) (and (not (cross? six x)) y)) #t (list one two three four five)))
                (let ((seven (cons 7 (amb chess))))
                  (require (distinct? (list one two three four five six seven)))
                  (require (fold (lambda (x y) (and (not (cross? seven x)) y)) #t (list one two three four five six)))
                  (let ((eight (cons 8 (amb chess))))
                    (require (distinct? (lsit one two three four five six seven eight)))
                    (require (fold (lambda (x y) (and (not (cross? eight x)) y)) #t (list one two three four five six seven)))
                    (list one two three four five six seven eight)))))))))))

;; 自然言語の構文解析
(define nouns '(noun student professor cat class))
(define verbs '(verb studies lectures eats sleeps))
(define articles '(article the a))

(define (parse-sentence)
  (list 'sentence
        (parse-noun-phrase)
        (parse-word verbs)))

(define (parse-noun-phrase)
  (list 'noun-phrase
        (parse-word articles)
        (parse-word nouns)))

(define (parse-word word-list)
  (require (not (null? *unparsed*)))
  (require (memq (car *unparsed*) (cdr word-list)))
  (let ((found-word (car *unparsed*)))
    (set! *unparsed* (cdr *unparsed*))
    (list (car word-list) found-word)))

(define *unparsed* '())

(define (parse input)
  (set! *unparsed* input)
  (let ((sent (parse-sentence)))
    (require (null? *unparsed*))
    sent))

(define prepositions '(prep for to in by with))

(define (parse-prepositional-phrase)
  (list 'prep-phrase
        (parse-word prepositions)
        (parse-noun-phrase)))

(define (parse-sentence)
  (list 'sentence (parse-noun-phrase) (parse-verb-phrase)))

(define (parse-verb-phrase)
  (define (maybe-extend verb-phrase)
    (amb verb-phrase
         (maybe-extend (list 'verb-phrase verb-phrase (parse-prepositional-phrase)))))
  (maybe-extend (parse-word verbs)))

(define (parse-noun-phrase)
  (define (maybe-extend noun-phrase)
    (amb noun-phrase
         (maybe-extend (list 'noun-phrase noun-phrase
                             (parse-prepositional-phrase)))))
  (maybe-extend (parse-simple-noun-phrase)))

;; 4.48
(define (parse-simple-noun-phrase)
  (list 'simple-noun-phrase
        (parse-article-phrase)
        (parse-word nouns)))

(define (parse-article-phrase)
  (define (maybe-extend article-phrase)
    (amb article-phrase
         (maybe-extend (list 'article-phrase
                             article-phrase
                             (parse-adjective-phrase)))))
  (maybe-extend (parse-word articles)))

;; 4.49
(define (an-element-of items)
  (require (not (null? items)))
  (amb (car items) (amb (cdr items))))

(define (parse-word word-list)
  (list (car word-list)
        (an-element-of (cdr word-list))))

(define (generate-sentence)
  (parse-sentence))


(begin
  ;; generate-sentence用
  (define (generate-sentence)
    (parse-sentence))
  (define (require p) (if (not p) (amb)))
  (define nouns '(noun student professor cat class))
  (define verbs '(verb studies lectures eats sleeps))
  (define articles '(article the a))
  (define prepositions '(prep for to in by with))
  (define *unparsed* '())

  (define (generate-sentence)
    (parse-sentence))

  (define (parse-sentence)
    (list 'sentence (parse-noun-phrase) (parse-verb-phrase)))


  (define (parse-noun-phrase)
    (define (maybe-extend noun-phrase)
      (amb noun-phrase
           (maybe-extend (list 'noun-phrase noun-phrase
                               (parse-prepositional-phrase)))))
    (maybe-extend (parse-simple-noun-phrase)))

  (define (parse-simple-noun-phrase)
    (list 'simple-noun-phrase
          (parse-article-phrase)
          (parse-word nouns)))

  (define (parse-article-phrase)
    (define (maybe-extend article-phrase)
      (amb article-phrase
           (maybe-extend (list 'article-phrase article-phrase
                               (parse-adjective-phrase)))))
    (maybe-extend (parse-word articles)))

  (define (parse-word word-list)
    (list (car word-list)
          (an-element-of (cdr word-list))))

  (define (an-element-of items)
    (require (not (null? items)))
    (amb (car items) (amb (cdr items))))

  (define (parse-verb-phrase)
    (define (maybe-extend verb-phrase)
      (amb verb-phrase
           (maybe-extend (list 'verb-phrase verb-phrase (parse-prepositional-phrase)))))
    (maybe-extend (parse-word verbs)))

  (define (parse-prepositional-phrase)
    (list 'prep-phrase
          (parse-word prepositions)
          (parse-noun-phrase)))
  )
